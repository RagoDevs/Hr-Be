// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: announcement.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAnnouncement = `-- name: CreateAnnouncement :exec
INSERT INTO announcement (
    description,
    announcement_date,
    created_by
)
VALUES ($1, $2, $3)
`

type CreateAnnouncementParams struct {
	Description      string    `json:"description"`
	AnnouncementDate time.Time `json:"announcement_date"`
	CreatedBy        uuid.UUID `json:"created_by"`
}

func (q *Queries) CreateAnnouncement(ctx context.Context, arg CreateAnnouncementParams) error {
	_, err := q.db.ExecContext(ctx, createAnnouncement, arg.Description, arg.AnnouncementDate, arg.CreatedBy)
	return err
}

const deleteAnnouncement = `-- name: DeleteAnnouncement :exec
DELETE FROM announcement WHERE id = $1
`

func (q *Queries) DeleteAnnouncement(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAnnouncement, id)
	return err
}

const getAnnouncementById = `-- name: GetAnnouncementById :one
SELECT id, description, announcement_date, created_by, created_at
FROM  announcement
WHERE id = $1
`

func (q *Queries) GetAnnouncementById(ctx context.Context, id uuid.UUID) (Announcement, error) {
	row := q.db.QueryRowContext(ctx, getAnnouncementById, id)
	var i Announcement
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.AnnouncementDate,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getAnnouncementsFromDate = `-- name: GetAnnouncementsFromDate :many
SELECT 
    a.id, 
    a.description, 
    a.announcement_date, 
    e.name AS created_by,
    a.created_at 

FROM announcement a  
JOIN employee e ON e.id = a.created_by
WHERE a.announcement_date >= $1 AND a.announcement_date < $1 + INTERVAL '3 days'
ORDER BY 
   a.created_at DESC
`

type GetAnnouncementsFromDateRow struct {
	ID               uuid.UUID `json:"id"`
	Description      string    `json:"description"`
	AnnouncementDate time.Time `json:"announcement_date"`
	CreatedBy        string    `json:"created_by"`
	CreatedAt        time.Time `json:"created_at"`
}

func (q *Queries) GetAnnouncementsFromDate(ctx context.Context, announcementDate time.Time) ([]GetAnnouncementsFromDateRow, error) {
	rows, err := q.db.QueryContext(ctx, getAnnouncementsFromDate, announcementDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAnnouncementsFromDateRow{}
	for rows.Next() {
		var i GetAnnouncementsFromDateRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.AnnouncementDate,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnnouncement = `-- name: UpdateAnnouncement :exec
UPDATE announcement
SET description = $1,
    announcement_date = $2
WHERE id = $3
`

type UpdateAnnouncementParams struct {
	Description      string    `json:"description"`
	AnnouncementDate time.Time `json:"announcement_date"`
	ID               uuid.UUID `json:"id"`
}

func (q *Queries) UpdateAnnouncement(ctx context.Context, arg UpdateAnnouncementParams) error {
	_, err := q.db.ExecContext(ctx, updateAnnouncement, arg.Description, arg.AnnouncementDate, arg.ID)
	return err
}
