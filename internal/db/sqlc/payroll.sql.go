// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: payroll.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPayroll = `-- name: CreatePayroll :exec
INSERT INTO payroll (
    employee_id, basic_salary, tin, bank_name, bank_account
) VALUES (
    $1, $2, $3, $4, $5
)
`

type CreatePayrollParams struct {
	EmployeeID  uuid.UUID `json:"employee_id"`
	BasicSalary string    `json:"basic_salary"`
	Tin         string    `json:"tin"`
	BankName    string    `json:"bank_name"`
	BankAccount string    `json:"bank_account"`
}

func (q *Queries) CreatePayroll(ctx context.Context, arg CreatePayrollParams) error {
	_, err := q.db.ExecContext(ctx, createPayroll,
		arg.EmployeeID,
		arg.BasicSalary,
		arg.Tin,
		arg.BankName,
		arg.BankAccount,
	)
	return err
}

const deletePayroll = `-- name: DeletePayroll :exec
UPDATE payroll
SET
    is_active = FALSE
WHERE id = $1
`

func (q *Queries) DeletePayroll(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePayroll, id)
	return err
}

const getPayroll = `-- name: GetPayroll :one
SELECT 
    payroll.id AS payroll_id,
    payroll.employee_id,
    payroll.basic_salary,
    payroll.tin,
    payroll.bank_name,
    payroll.bank_account,
    payroll.is_active AS payroll_is_active,
    payroll.created_at AS payroll_created_at,
    payroll.updated_at AS payroll_updated_at,
    employee.user_id,
    employee.name AS employee_name,
    employee.dob,
    employee.avatar,
    employee.phone,
    employee.gender,
    employee.job_title,
    employee.department,
    employee.address,
    employee.is_present AS employee_is_present,
    employee.joining_date AS employee_joining_date,
    employee.created_at AS employee_created_at
FROM payroll
JOIN employee ON payroll.employee_id = employee.id
WHERE payroll.id = $1
AND payroll.is_active = TRUE
`

type GetPayrollRow struct {
	PayrollID           uuid.UUID `json:"payroll_id"`
	EmployeeID          uuid.UUID `json:"employee_id"`
	BasicSalary         string    `json:"basic_salary"`
	Tin                 string    `json:"tin"`
	BankName            string    `json:"bank_name"`
	BankAccount         string    `json:"bank_account"`
	PayrollIsActive     bool      `json:"payroll_is_active"`
	PayrollCreatedAt    time.Time `json:"payroll_created_at"`
	PayrollUpdatedAt    time.Time `json:"payroll_updated_at"`
	UserID              uuid.UUID `json:"user_id"`
	EmployeeName        string    `json:"employee_name"`
	Dob                 time.Time `json:"dob"`
	Avatar              string    `json:"avatar"`
	Phone               string    `json:"phone"`
	Gender              string    `json:"gender"`
	JobTitle            string    `json:"job_title"`
	Department          string    `json:"department"`
	Address             string    `json:"address"`
	EmployeeIsPresent   bool      `json:"employee_is_present"`
	EmployeeJoiningDate time.Time `json:"employee_joining_date"`
	EmployeeCreatedAt   time.Time `json:"employee_created_at"`
}

func (q *Queries) GetPayroll(ctx context.Context, id uuid.UUID) (GetPayrollRow, error) {
	row := q.db.QueryRowContext(ctx, getPayroll, id)
	var i GetPayrollRow
	err := row.Scan(
		&i.PayrollID,
		&i.EmployeeID,
		&i.BasicSalary,
		&i.Tin,
		&i.BankName,
		&i.BankAccount,
		&i.PayrollIsActive,
		&i.PayrollCreatedAt,
		&i.PayrollUpdatedAt,
		&i.UserID,
		&i.EmployeeName,
		&i.Dob,
		&i.Avatar,
		&i.Phone,
		&i.Gender,
		&i.JobTitle,
		&i.Department,
		&i.Address,
		&i.EmployeeIsPresent,
		&i.EmployeeJoiningDate,
		&i.EmployeeCreatedAt,
	)
	return i, err
}

const getPayrollByID = `-- name: GetPayrollByID :one
SELECT id, employee_id, basic_salary, tin, bank_name, bank_account, is_active, created_at, updated_at
FROM payroll
WHERE id = $1
`

func (q *Queries) GetPayrollByID(ctx context.Context, id uuid.UUID) (Payroll, error) {
	row := q.db.QueryRowContext(ctx, getPayrollByID, id)
	var i Payroll
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.BasicSalary,
		&i.Tin,
		&i.BankName,
		&i.BankAccount,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isEmployeeExisting = `-- name: IsEmployeeExisting :one
SELECT EXISTS (
    SELECT 1 FROM payroll WHERE employee_id = $1
)
`

func (q *Queries) IsEmployeeExisting(ctx context.Context, employeeID uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, isEmployeeExisting, employeeID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updatePayroll = `-- name: UpdatePayroll :exec
UPDATE payroll
SET
    basic_salary = $2,
    tin = $3,
    bank_name = $4,
    bank_account = $5,
    is_active = $6,
    updated_at = NOW()
WHERE id = $1
`

type UpdatePayrollParams struct {
	ID          uuid.UUID `json:"id"`
	BasicSalary string    `json:"basic_salary"`
	Tin         string    `json:"tin"`
	BankName    string    `json:"bank_name"`
	BankAccount string    `json:"bank_account"`
	IsActive    bool      `json:"is_active"`
}

func (q *Queries) UpdatePayroll(ctx context.Context, arg UpdatePayrollParams) error {
	_, err := q.db.ExecContext(ctx, updatePayroll,
		arg.ID,
		arg.BasicSalary,
		arg.Tin,
		arg.BankName,
		arg.BankAccount,
		arg.IsActive,
	)
	return err
}
