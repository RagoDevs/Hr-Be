// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: contract.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createContract = `-- name: CreateContract :exec
INSERT INTO contract (
    employee_id, 
    contract_type,
    period,  
    start_date,
    end_date,
    attachment)
	VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateContractParams struct {
	EmployeeID   uuid.UUID `json:"employee_id"`
	ContractType string    `json:"contract_type"`
	Period       int32     `json:"period"`
	StartDate    time.Time `json:"start_date"`
	EndDate      time.Time `json:"end_date"`
	Attachment   string    `json:"attachment"`
}

func (q *Queries) CreateContract(ctx context.Context, arg CreateContractParams) error {
	_, err := q.db.ExecContext(ctx, createContract,
		arg.EmployeeID,
		arg.ContractType,
		arg.Period,
		arg.StartDate,
		arg.EndDate,
		arg.Attachment,
	)
	return err
}

const deleteContract = `-- name: DeleteContract :exec
DELETE FROM contract WHERE id = $1
`

func (q *Queries) DeleteContract(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteContract, id)
	return err
}

const getAllContracts = `-- name: GetAllContracts :many
SELECT
    c.id AS contract_id,
    c.employee_id, 
    e.name AS employee_name,
    u.email AS employee_email,
    e.avatar,
    e.job_title,
    e.department,
    c.contract_type,
    c.period,  
    c.start_date,
    c.end_date,
    c.attachment
    
FROM 
    contract c
JOIN 
    employee e ON e.id = c.employee_id
JOIN
    users u ON e.user_id = u.id

ORDER BY
    c.created_at DESC
`

type GetAllContractsRow struct {
	ContractID    uuid.UUID `json:"contract_id"`
	EmployeeID    uuid.UUID `json:"employee_id"`
	EmployeeName  string    `json:"employee_name"`
	EmployeeEmail string    `json:"employee_email"`
	Avatar        string    `json:"avatar"`
	JobTitle      string    `json:"job_title"`
	Department    string    `json:"department"`
	ContractType  string    `json:"contract_type"`
	Period        int32     `json:"period"`
	StartDate     time.Time `json:"start_date"`
	EndDate       time.Time `json:"end_date"`
	Attachment    string    `json:"attachment"`
}

func (q *Queries) GetAllContracts(ctx context.Context) ([]GetAllContractsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllContracts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllContractsRow{}
	for rows.Next() {
		var i GetAllContractsRow
		if err := rows.Scan(
			&i.ContractID,
			&i.EmployeeID,
			&i.EmployeeName,
			&i.EmployeeEmail,
			&i.Avatar,
			&i.JobTitle,
			&i.Department,
			&i.ContractType,
			&i.Period,
			&i.StartDate,
			&i.EndDate,
			&i.Attachment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContractById = `-- name: GetContractById :one
SELECT id, employee_id, contract_type, period, start_date, end_date, attachment, created_at FROM  contract  WHERE contract.id = $1
`

func (q *Queries) GetContractById(ctx context.Context, id uuid.UUID) (Contract, error) {
	row := q.db.QueryRowContext(ctx, getContractById, id)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.EmployeeID,
		&i.ContractType,
		&i.Period,
		&i.StartDate,
		&i.EndDate,
		&i.Attachment,
		&i.CreatedAt,
	)
	return i, err
}

const getContractByIdDetailed = `-- name: GetContractByIdDetailed :one
SELECT
    c.id AS contract_id,
    c.employee_id, 
    e.name AS employee_name,
    u.email AS employee_email,
    e.avatar,
    e.job_title,
    e.department,
    c.contract_type,
    c.period,  
    c.start_date,
    c.end_date,
    c.attachment
    
FROM 
    contract c
JOIN 
    employee e ON e.id = c.employee_id
JOIN
    users u ON e.user_id = u.id
WHERE 
    c.id = $1
`

type GetContractByIdDetailedRow struct {
	ContractID    uuid.UUID `json:"contract_id"`
	EmployeeID    uuid.UUID `json:"employee_id"`
	EmployeeName  string    `json:"employee_name"`
	EmployeeEmail string    `json:"employee_email"`
	Avatar        string    `json:"avatar"`
	JobTitle      string    `json:"job_title"`
	Department    string    `json:"department"`
	ContractType  string    `json:"contract_type"`
	Period        int32     `json:"period"`
	StartDate     time.Time `json:"start_date"`
	EndDate       time.Time `json:"end_date"`
	Attachment    string    `json:"attachment"`
}

func (q *Queries) GetContractByIdDetailed(ctx context.Context, id uuid.UUID) (GetContractByIdDetailedRow, error) {
	row := q.db.QueryRowContext(ctx, getContractByIdDetailed, id)
	var i GetContractByIdDetailedRow
	err := row.Scan(
		&i.ContractID,
		&i.EmployeeID,
		&i.EmployeeName,
		&i.EmployeeEmail,
		&i.Avatar,
		&i.JobTitle,
		&i.Department,
		&i.ContractType,
		&i.Period,
		&i.StartDate,
		&i.EndDate,
		&i.Attachment,
	)
	return i, err
}

const updateContract = `-- name: UpdateContract :exec
UPDATE contract
SET contract_type = $1,
    period = $2,
    start_date = $3,
    end_date = $4,
    attachment = $5
WHERE id = $6
`

type UpdateContractParams struct {
	ContractType string    `json:"contract_type"`
	Period       int32     `json:"period"`
	StartDate    time.Time `json:"start_date"`
	EndDate      time.Time `json:"end_date"`
	Attachment   string    `json:"attachment"`
	ID           uuid.UUID `json:"id"`
}

func (q *Queries) UpdateContract(ctx context.Context, arg UpdateContractParams) error {
	_, err := q.db.ExecContext(ctx, updateContract,
		arg.ContractType,
		arg.Period,
		arg.StartDate,
		arg.EndDate,
		arg.Attachment,
		arg.ID,
	)
	return err
}
